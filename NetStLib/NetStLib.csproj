<Project Sdk="Microsoft.NET.Sdk">
    <Import Project="$(RepositoryRootPath)/Base.standard20.props" />
    <ItemGroup>
        <!-- 
        We use copy here and not CopyToOutputDirectory, because with those 230+ projects, when rebuild is being done, it was failing
        Basically Rebuild solution does Parallel.Foreach(projects, project => { Clean(project); Build(project); }
        But that would be cleaning some resources and dlls for other already building projects, which was resulting in failures
        That is why we are doing this, because this is only ran after Build, but when Clean is called, resources are not cleaned
         -->
        <ToCopyResources Include="text.json" />
        <!--<UpToDateCheckBuilt Include="@(ToCopyResources->'$(TargetDir)%(RecursiveDir)%(Filename)%(Extension)')" Original="@(ToCopyResources)" />-->
    </ItemGroup>

    <ItemGroup>
        <None Include="@(ToCopyResources)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>

    <!--<Target Name="PostBuild" AfterTargets="PostBuildEvent">
        --><!-- 
        This copy only to netstandard2.0 folder, but not in the other (net48, net8) folders
        Ideal solution would be to somehow get projects referencing this project and read their TargetFramework or OutputPath and adjust this copy to acomodate that without modyfing other projects
        --><!--
        <Copy SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" SourceFiles="@(ToCopyResources)" DestinationFolder="$(TargetDir)" />
        <Copy SkipUnchangedFiles="true" Condition="$(OutputPathFromCli) == ''" OverwriteReadOnlyFiles="true" SourceFiles="@(ToCopyResources)" DestinationFolder="$(TargetDir)../$(TargetFrameworkNet48)" />
        <Copy SkipUnchangedFiles="true" Condition="$(OutputPathFromCli) == ''" OverwriteReadOnlyFiles="true" SourceFiles="@(ToCopyResources)" DestinationFolder="$(TargetDir)../$(TargetFrameworkNet)" />
    </Target>-->
</Project>
